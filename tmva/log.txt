   ------------------------------------------------------------------
  | Welcome to ROOT 6.26/00                        https://root.cern |
  | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |
  | Built for linuxx8664gcc on Mar 03 2022, 06:51:13                 |
  | From tags/v6-26-00@v6-26-00                                      |
  | With g++ (GCC) 11.2.0                                            |
  | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q'       |
   ------------------------------------------------------------------


Processing train.C...
                         : Parsing option string: 
                         : ... "V:!Silent:Color:DrawProgressBar:!ROC:ModelPersistence:AnalysisType=Regression:Transformations=None:!Correlations:VerboseLevel=Verbose"
                         : The following options are set:
                         : - By User:
                         :     V: "True" [Verbose flag]
                         :     VerboseLevel: "Verbose" [VerboseLevel (Debug/Verbose/Info)]
                         :     Color: "True" [Flag for coloured screen output (default: True, if in batch mode: False)]
                         :     Transformations: "None" [List of transformations to test; formatting example: "Transformations=I;D;P;U;G,D", for identity, decorrelation, PCA, Uniform and Gaussianisation followed by decorrelation transformations]
                         :     Correlations: "False" [boolean to show correlation in output]
                         :     ROC: "False" [boolean to show ROC in output]
                         :     Silent: "False" [Batch mode: boolean silent flag inhibiting any output from TMVA after the creation of the factory class object (default: False)]
                         :     DrawProgressBar: "True" [Draw progress bar to display training, testing and evaluation schedule (default: True)]
                         :     ModelPersistence: "True" [Option to save the trained model in xml file or using serialization]
                         :     AnalysisType: "Regression" [Set the analysis type (Classification, Regression, Multiclass, Auto) (default: Auto)]
                         : - Default:
                         :     <none>
DataSetInfo              : [dataset] : Added class "Regression"
                         : Add Tree train of type Regression with 3200 events
                         : Dataset[dataset] : Class index : 0  name : Regression
Factory                  : Booking method: [1mtmvaDL[0m
                         : 
                         : Parsing option string: 
                         : ... "BatchLayout=32|1|2304:InputLayout=1|72|32:Layout=CONV|16|3|3|1|1|1|1|RELU,CONV|16|3|3|1|1|1|1|RELU,MAXPOOL|2|2|2|2,CONV|32|3|3|1|1|1|1|RELU,CONV|32|3|3|1|1|1|1|RELU,MAXPOOL|2|2|2|2,CONV|64|3|3|1|1|1|1|RELU,CONV|64|3|3|1|1|1|1|RELU,MAXPOOL|2|2|2|2,RESHAPE|FLAT,DENSE|1024|RELU,DENSE|15|RELU:TrainingStrategy=MaxEpochs=10,BatchSize=32,Optimizer=ADAM,LearningRate=1e-3:H:V:VarTransform=None:ErrorStrategy=SUMOFSQUARES:VerbosityLevel=Verbose:Architecture=GPU"
                         : The following options are set:
                         : - By User:
                         :     <none>
                         : - Default:
                         :     Boost_num: "0" [Number of times the classifier will be boosted]
                         : Parsing option string: 
                         : ... "BatchLayout=32|1|2304:InputLayout=1|72|32:Layout=CONV|16|3|3|1|1|1|1|RELU,CONV|16|3|3|1|1|1|1|RELU,MAXPOOL|2|2|2|2,CONV|32|3|3|1|1|1|1|RELU,CONV|32|3|3|1|1|1|1|RELU,MAXPOOL|2|2|2|2,CONV|64|3|3|1|1|1|1|RELU,CONV|64|3|3|1|1|1|1|RELU,MAXPOOL|2|2|2|2,RESHAPE|FLAT,DENSE|1024|RELU,DENSE|15|RELU:TrainingStrategy=MaxEpochs=10,BatchSize=32,Optimizer=ADAM,LearningRate=1e-3:H:V:VarTransform=None:ErrorStrategy=SUMOFSQUARES:VerbosityLevel=Verbose:Architecture=GPU"
                         : The following options are set:
                         : - By User:
                         :     V: "True" [Verbose output (short form of "VerbosityLevel" below - overrides the latter one)]
                         :     VerbosityLevel: "Verbose" [Verbosity level]
                         :     VarTransform: "None" [List of variable transformations performed before training, e.g., "D_Background,P_Signal,G,N_AllClasses" for: "Decorrelation, PCA-transformation, Gaussianisation, Normalisation, each for the given class of events ('AllClasses' denotes all events of all classes, if no class indication is given, 'All' is assumed)"]
                         :     H: "True" [Print method-specific help message]
                         :     InputLayout: "1|72|32" [The Layout of the input]
                         :     BatchLayout: "32|1|2304" [The Layout of the batch]
                         :     Layout: "CONV|16|3|3|1|1|1|1|RELU,CONV|16|3|3|1|1|1|1|RELU,MAXPOOL|2|2|2|2,CONV|32|3|3|1|1|1|1|RELU,CONV|32|3|3|1|1|1|1|RELU,MAXPOOL|2|2|2|2,CONV|64|3|3|1|1|1|1|RELU,CONV|64|3|3|1|1|1|1|RELU,MAXPOOL|2|2|2|2,RESHAPE|FLAT,DENSE|1024|RELU,DENSE|15|RELU" [Layout of the network.]
                         :     ErrorStrategy: "SUMOFSQUARES" [Loss function: Mean squared error (regression) or cross entropy (binary classification).]
                         :     Architecture: "GPU" [Which architecture to perform the training on.]
                         :     TrainingStrategy: "MaxEpochs=10,BatchSize=32,Optimizer=ADAM,LearningRate=1e-3" [Defines the training strategies.]
                         : - Default:
                         :     CreateMVAPdfs: "False" [Create PDFs for classifier outputs (signal and background)]
                         :     IgnoreNegWeightsInTraining: "False" [Events with negative weights are ignored in the training (but are included for testing and performance evaluation)]
                         :     WeightInitialization: "XAVIER" [Weight initialization strategy]
                         :     RandomSeed: "0" [Random seed used for weight initialization and batch shuffling]
                         :     ValidationSize: "20%" [Part of the training data to use for validation. Specify as 0.2 or 20% to use a fifth of the data set as validation set. Specify as 100 to use exactly 100 events. (Default: 20%)]
                         : Will now use the GPU architecture !
                         : Start of deep neural network training on GPU.
                         : 
                         : Rebuilding Dataset dataset
                         : Parsing option string: 
                         : ... "SplitMode=Random:NormMode=None:V:!Correlations:!CalcCorrelations"
                         : The following options are set:
                         : - By User:
                         :     SplitMode: "Random" [Method of picking training and testing events (default: random)]
                         :     NormMode: "None" [Overall renormalisation of  event-by-event weights used in the training (NumEvents: average weight of 1 per event, independently for signal and background; EqualNumEvents: average weight of 1 per event for signal, and sum of weights for background equal to sum of weights for signal)]
                         :     V: "True" [Verbosity (default: true)]
                         :     Correlations: "False" [Boolean to show correlation output (Default: true)]
                         :     CalcCorrelations: "False" [Compute correlations and also some variable statistics, e.g. min/max (Default: true )]
                         : - Default:
                         :     MixMode: "SameAsSplitMode" [Method of mixing events of different classes into one dataset (default: SameAsSplitMode)]
                         :     SplitSeed: "100" [Seed for random event shuffling]
                         :     ScaleWithPreselEff: "False" [Scale the number of requested events by the eff. of the preselection cuts (or not)]
                         :     nTrain_Regression: "0" [Number of training events of class Regression (default: 0 = all)]
                         :     nTest_Regression: "0" [Number of test events of class Regression (default: 0 = all)]
                         :     TrainTestSplit_Regression: "0.000000e+00" [Number of test events of class Regression (default: 0 = all)]
                         :     VerboseLevel: "Info" [VerboseLevel (Debug/Verbose/Info)]
                         : Building event vectors for type 2 Regression
                         : Dataset[dataset] :  create input formulas for tree train
DataSetFactory           : [dataset] : Number of events in input trees
                         : 
                         : Dataset[dataset] : No weight renormalisation applied: use original global and event weights
TCudaTensor::create cudnn handle ! 
CONV FWD Algo used for convolution of input shape { 32 , 1 , 72 , 32 } is 0
CONV BWD Data Algo used  is 0
CONV BWD Filter Algo used  is 0
CONV FWD Algo used for convolution of input shape { 32 , 16 , 72 , 32 } is 6
CONV BWD Data Algo used  is 4
CONV BWD Filter Algo used  is 0
CONV FWD Algo used for convolution of input shape { 32 , 16 , 36 , 16 } is 6
CONV BWD Data Algo used  is 4
CONV BWD Filter Algo used  is 0
CONV FWD Algo used for convolution of input shape { 32 , 32 , 36 , 16 } is 6
CONV BWD Data Algo used  is 4
CONV BWD Filter Algo used  is 5
CONV FWD Algo used for convolution of input shape { 32 , 32 , 18 , 8 } is 1
CONV BWD Data Algo used  is 4
CONV BWD Filter Algo used  is 5
CONV FWD Algo used for convolution of input shape { 32 , 64 , 18 , 8 } is 7
CONV BWD Data Algo used  is 4
CONV BWD Filter Algo used  is 5
                         : *****   Deep Learning Network *****
DEEP NEURAL NETWORK:   Depth = 12  Input = ( 1, 72, 32 )  Batch size = 32  Loss function = R
	Layer 0	 CONV LAYER: 	( W = 32 ,  H = 72 ,  D = 16 ) 	 Filter ( W = 3 ,  H = 3 ) 	Output = ( 32 , 16 , 72 , 32 ) 	 Activation Function = Relu
	Layer 1	 CONV LAYER: 	( W = 32 ,  H = 72 ,  D = 16 ) 	 Filter ( W = 3 ,  H = 3 ) 	Output = ( 32 , 16 , 72 , 32 ) 	 Activation Function = Relu
	Layer 2	 POOL Layer: 	( W = 16 ,  H = 36 ,  D = 16 ) 	 Filter ( W = 2 ,  H = 2 ) 	Output = ( 32 , 16 , 36 , 16 ) 
	Layer 3	 CONV LAYER: 	( W = 16 ,  H = 36 ,  D = 32 ) 	 Filter ( W = 3 ,  H = 3 ) 	Output = ( 32 , 32 , 36 , 16 ) 	 Activation Function = Relu
	Layer 4	 CONV LAYER: 	( W = 16 ,  H = 36 ,  D = 32 ) 	 Filter ( W = 3 ,  H = 3 ) 	Output = ( 32 , 32 , 36 , 16 ) 	 Activation Function = Relu
	Layer 5	 POOL Layer: 	( W = 8 ,  H = 18 ,  D = 32 ) 	 Filter ( W = 2 ,  H = 2 ) 	Output = ( 32 , 32 , 18 , 8 ) 
	Layer 6	 CONV LAYER: 	( W = 8 ,  H = 18 ,  D = 64 ) 	 Filter ( W = 3 ,  H = 3 ) 	Output = ( 32 , 64 , 18 , 8 ) 	 Activation Function = Relu
	Layer 7	 CONV LAYER: 	( W = 8 ,  H = 18 ,  D = 64 ) 	 Filter ( W = 3 ,  H = 3 ) 	Output = ( 32 , 64 , 18 , 8 ) 	 Activation Function = Relu
	Layer 8	 POOL Layer: 	( W = 4 ,  H = 9 ,  D = 64 ) 	 Filter ( W = 2 ,  H = 2 ) 	Output = ( 32 , 64 , 9 , 4 ) 
	Layer 9	 RESHAPE Layer 	 Input = ( 64 , 9 , 4 ) 	Output = ( 1 , 32 , 2304 ) 
	Layer 10	 DENSE Layer: 	 ( Input =  2304 , Width =  1024 ) 	Output = (  1 ,    32 ,  1024 ) 	 Activation Function = Relu
	Layer 11	 DENSE Layer: 	 ( Input =  1024 , Width =    15 ) 	Output = (  1 ,    32 ,    15 ) 	 Activation Function = Relu
                         : Using 1280 events for training and 320 for testing
                         : Compute initial loss  on the validation data 
                         : Training phase 1 of 1:  Optimizer ADAM (beta1=0.9,beta2=0.999,eps=1e-07) Learning rate = 0.001 regularization 0 minimum error = 0
                         : --------------------------------------------------------------
                         :      Epoch |   Train Err.   Val. Err.  t(s)/epoch   t(s)/Loss   nEvents/s Conv. Steps
                         : --------------------------------------------------------------
                         :    Start epoch iteration ...
                         :          7 |            0           0     0.40571    0.026946     3185.18           7
                         :         14 |            0           0    0.391773    0.027025     3299.71          14
                         : 
Factory                  : [1mTest all methods[0m
Factory                  : Test method: tmvaDL for Regression performance
                         : 
                         : Dataset[dataset] : Create results for testing
                         : Dataset[dataset] : Evaluation of tmvaDL on testing sample
